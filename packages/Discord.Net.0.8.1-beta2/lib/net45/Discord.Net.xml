<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Discord.Net</name>
    </assembly>
    <members>
        <member name="T:Discord.DiscordAPIClient">
            <summary> A lightweight wrapper around the Discord API. </summary>
        </member>
        <member name="P:Discord.DiscordAPIClientConfig.LogLevel">
            <summary> Specifies the minimum log level severity that will be sent to the LogMessage event. Warning: setting this to debug will really hurt performance but should help investigate any internal issues. </summary>
        </member>
        <member name="P:Discord.DiscordAPIClientConfig.APITimeout">
            <summary> Max time (in milliseconds) to wait for an API request to complete. </summary>
        </member>
        <member name="P:Discord.DiscordAPIClientConfig.ProxyUrl">
            <summary> The proxy to user for API and WebSocket connections. </summary>
        </member>
        <member name="P:Discord.DiscordAPIClientConfig.ProxyCredentials">
            <summary> The credentials to use for this proxy. </summary>
        </member>
        <member name="T:Discord.DiscordClient">
            <summary> Provides a connection to the DiscordApp service. </summary>
        </member>
        <member name="P:Discord.DiscordClient.PrivateChannels">
            <summary> Returns a collection of all servers this client is a member of. </summary>
        </member>
        <member name="M:Discord.DiscordClient.GetChannel(System.Int64)">
            <summary> Returns the channel with the specified id, or null if none was found. </summary>
        </member>
        <member name="M:Discord.DiscordClient.FindChannels(Discord.Server,System.String,Discord.ChannelType,System.Boolean)">
            <summary> Returns all channels with the specified server and name. </summary>
            <remarks> Name formats supported: Name and #Name. Search is case-insensitive. </remarks>
        </member>
        <member name="M:Discord.DiscordClient.CreateChannel(Discord.Server,System.String,Discord.ChannelType)">
            <summary> Creates a new channel with the provided name and type. </summary>
        </member>
        <member name="M:Discord.DiscordClient.CreatePMChannel(Discord.User)">
            <summary> Returns the private channel with the provided user, creating one if it does not currently exist. </summary>
        </member>
        <member name="M:Discord.DiscordClient.EditChannel(Discord.Channel,System.String,System.String,System.Nullable{System.Int32})">
            <summary> Edits the provided channel, changing only non-null attributes. </summary>
        </member>
        <member name="M:Discord.DiscordClient.ReorderChannels(Discord.Server,System.Collections.Generic.IEnumerable{Discord.Channel},Discord.Channel)">
            <summary> Reorders the provided channels in the server's channel list and places them after a certain channel. </summary>
        </member>
        <member name="M:Discord.DiscordClient.DeleteChannel(Discord.Channel)">
            <summary> Destroys the provided channel. </summary>
        </member>
        <member name="P:Discord.DiscordClient.Config">
            <summary> Returns the configuration object used to make this client. Note that this object cannot be edited directly - to change the configuration of this client, use the DiscordClient(DiscordClientConfig config) constructor. </summary>
        </member>
        <member name="P:Discord.DiscordClient.API">
            <summary> Gives direct access to the underlying DiscordAPIClient. This can be used to modify objects not in cache. </summary>
        </member>
        <member name="M:Discord.DiscordClient.#ctor(Discord.DiscordClientConfig)">
            <summary> Initializes a new instance of the DiscordClient class. </summary>
        </member>
        <member name="M:Discord.DiscordClient.Connect(System.String,System.String)">
            <summary> Connects to the Discord server with the provided email and password. </summary>
            <returns> Returns a token for future connections. </returns>
        </member>
        <member name="M:Discord.DiscordClient.Connect(System.String)">
            <summary> Connects to the Discord server with the provided token. </summary>
        </member>
        <member name="M:Discord.DiscordClient.GetInvite(System.String)">
            <summary> Gets more info about the provided invite code. </summary>
            <remarks> Supported formats: inviteCode, xkcdCode, https://discord.gg/inviteCode, https://discord.gg/xkcdCode </remarks>
        </member>
        <member name="M:Discord.DiscordClient.GetInvites(Discord.Server)">
            <summary> Gets all active (non-expired) invites to a provided server. </summary>
        </member>
        <member name="M:Discord.DiscordClient.CreateInvite(Discord.Server,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary> Creates a new invite to the default channel of the provided server. </summary>
            <param name="maxAge"> Time (in seconds) until the invite expires. Set to 0 to never expire. </param>
            <param name="tempMembership"> If true, a user accepting this invite will be kicked from the server after closing their client. </param>
            <param name="hasXkcd"> If true, creates a human-readable link. Not supported if maxAge is set to 0. </param>
            <param name="maxUses"> The max amount  of times this invite may be used. Set to 0 to have unlimited uses. </param>
        </member>
        <member name="M:Discord.DiscordClient.CreateInvite(Discord.Channel,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary> Creates a new invite to the provided channel. </summary>
            <param name="maxAge"> Time (in seconds) until the invite expires. Set to 0 to never expire. </param>
            <param name="tempMembership"> If true, a user accepting this invite will be kicked from the server after closing their client. </param>
            <param name="hasXkcd"> If true, creates a human-readable link. Not supported if maxAge is set to 0. </param>
            <param name="maxUses"> The max amount  of times this invite may be used. Set to 0 to have unlimited uses. </param>
        </member>
        <member name="M:Discord.DiscordClient.DeleteInvite(Discord.Invite)">
            <summary> Deletes the provided invite. </summary>
        </member>
        <member name="M:Discord.DiscordClient.AcceptInvite(Discord.Invite)">
            <summary> Accepts the provided invite. </summary>
        </member>
        <member name="M:Discord.DiscordClient.GetMessage(System.Int64)">
            <summary> Returns the message with the specified id, or null if none was found. </summary>
        </member>
        <member name="M:Discord.DiscordClient.SendMessage(Discord.Channel,System.String)">
            <summary> Sends a message to the provided channel. To include a mention, see the Mention static helper class. </summary>
        </member>
        <member name="M:Discord.DiscordClient.SendTTSMessage(Discord.Channel,System.String)">
            <summary> Sends a text-to-speech message to the provided channel. To include a mention, see the Mention static helper class. </summary>
        </member>
        <member name="M:Discord.DiscordClient.SendPrivateMessage(Discord.User,System.String)">
            <summary> Sends a private message to the provided user. </summary>
        </member>
        <member name="M:Discord.DiscordClient.SendFile(Discord.Channel,System.String)">
            <summary> Sends a file to the provided channel. </summary>
        </member>
        <member name="M:Discord.DiscordClient.EditMessage(Discord.Message,System.String)">
            <summary> Edits the provided message, changing only non-null attributes. </summary>
            <remarks> While not required, it is recommended to include a mention reference in the text (see Mention.User). </remarks>
        </member>
        <member name="M:Discord.DiscordClient.DeleteMessage(Discord.Message)">
            <summary> Deletes the provided message. </summary>
        </member>
        <member name="M:Discord.DiscordClient.DownloadMessages(Discord.Channel,System.Int32,System.Nullable{System.Int64},Discord.RelativeDirection,System.Boolean)">
            <summary> Downloads last count messages from the server, returning all messages before or after relativeMessageId, if it's provided. </summary>
        </member>
        <member name="M:Discord.DiscordClient.GetRole(System.Int64)">
            <summary> Returns the role with the specified id, or null if none was found. </summary>
        </member>
        <member name="M:Discord.DiscordClient.FindRoles(Discord.Server,System.String)">
            <summary> Returns all roles with the specified server and name. </summary>
            <remarks> Name formats supported: Name and @Name. Search is case-insensitive. </remarks>
        </member>
        <member name="M:Discord.DiscordClient.CreateRole(Discord.Server,System.String)">
            <summary> Note: due to current API limitations, the created role cannot be returned. </summary>
        </member>
        <member name="P:Discord.DiscordClient.AllServers">
            <summary> Returns a collection of all servers this client is a member of. </summary>
        </member>
        <member name="M:Discord.DiscordClient.GetServer(System.Int64)">
            <summary> Returns the server with the specified id, or null if none was found. </summary>
        </member>
        <member name="M:Discord.DiscordClient.FindServers(System.String)">
            <summary> Returns all servers with the specified name. </summary>
            <remarks> Search is case-insensitive. </remarks>
        </member>
        <member name="M:Discord.DiscordClient.CreateServer(System.String,Discord.Region)">
            <summary> Creates a new server with the provided name and region (see Regions). </summary>
        </member>
        <member name="M:Discord.DiscordClient.EditServer(Discord.Server,System.String,Discord.Region,Discord.ImageType,System.Byte[])">
            <summary> Edits the provided server, changing only non-null attributes. </summary>
        </member>
        <member name="M:Discord.DiscordClient.LeaveServer(Discord.Server)">
            <summary> Leaves the provided server, destroying it if you are the owner. </summary>
        </member>
        <member name="P:Discord.DiscordClient.PrivateUser">
            <summary> Returns the current logged-in user in a private channel. </summary>
        </member>
        <member name="P:Discord.DiscordClient.CurrentUser">
            <summary> Returns information about the currently logged-in account. </summary>
        </member>
        <member name="P:Discord.DiscordClient.GlobalUsers">
            <summary> Returns a collection of all users this client can currently see. </summary>
        </member>
        <member name="M:Discord.DiscordClient.GetUser(Discord.Server,System.Int64)">
            <summary> Returns the user with the specified id, along with their server-specific data, or null if none was found. </summary>
        </member>
        <member name="M:Discord.DiscordClient.GetUser(Discord.Server,System.String,System.Int16)">
            <summary> Returns the user with the specified name and discriminator, along withtheir server-specific data, or null if they couldn't be found. </summary>
            <remarks> Name formats supported: Name and @Name. Search is case-insensitive. </remarks>
        </member>
        <member name="M:Discord.DiscordClient.FindUsers(Discord.Server,System.String,System.Nullable{System.Int16},System.Boolean)">
            <summary> Returns all users with the specified server and name, along with their server-specific data. </summary>
            <remarks> Name formats supported: Name and @Name. Search is case-insensitive.</remarks>
        </member>
        <member name="M:Discord.DiscordClient.FindUsers(Discord.Channel,System.String,System.Nullable{System.Int16},System.Boolean)">
            <summary> Returns all users with the specified channel and name, along with their server-specific data. </summary>
            <remarks> Name formats supported: Name and @Name. Search is case-insensitive.</remarks>
        </member>
        <member name="M:Discord.DiscordClient.RequestOfflineUsers(Discord.Server)">
            <summary>When Config.UseLargeThreshold is enabled, running this command will request the Discord server to provide you with all offline users for a particular server.</summary>
        </member>
        <member name="P:Discord.DiscordClientConfig.MessageQueueInterval">
            <summary> Gets or sets the time (in milliseconds) to wait when the message queue is empty before checking again. </summary>
        </member>
        <member name="P:Discord.DiscordClientConfig.MessageCacheLength">
            <summary> Gets or sets the number of messages per channel that should be kept in cache. Setting this to zero disables the message cache entirely. </summary>
        </member>
        <member name="P:Discord.DiscordClientConfig.EnableVoiceMultiserver">
            <summary> (Experimental) Enables the client to be simultaneously connected to multiple channels at once (Discord still limits you to one channel per server). </summary>
        </member>
        <member name="P:Discord.DiscordClientConfig.UseMessageQueue">
            <summary> (Experimental) Enables or disables the internal message queue. This will allow SendMessage to return immediately and handle messages internally. Messages will set the IsQueued and HasFailed properties to show their progress. </summary>
        </member>
        <member name="P:Discord.DiscordClientConfig.TrackActivity">
            <summary> (Experimental) Maintains the LastActivity property for users, showing when they last made an action (sent message, joined server, typed, etc). </summary>
        </member>
        <member name="P:Discord.DiscordClientConfig.AckMessages">
            <summary> (Experimental) Acknowledges all incoming messages so that they appear read. </summary>
        </member>
        <member name="T:Discord.DiscordWSClient">
            <summary> Provides a minimalistic websocket connection to the Discord service. </summary>
        </member>
        <member name="P:Discord.DiscordWSClient.Config">
            <summary> Returns the configuration object used to make this client. Note that this object cannot be edited directly - to change the configuration of this client, use the DiscordClient(DiscordClientConfig config) constructor. </summary>
        </member>
        <member name="P:Discord.DiscordWSClient.State">
            <summary> Returns the current connection state of this client. </summary>
        </member>
        <member name="M:Discord.DiscordWSClient.#ctor(Discord.DiscordWSClientConfig)">
            <summary> Initializes a new instance of the DiscordClient class. </summary>
        </member>
        <member name="M:Discord.DiscordWSClient.Disconnect">
            <summary> Disconnects from the Discord server, canceling any pending requests. </summary>
        </member>
        <member name="M:Discord.DiscordWSClient.Run(System.Func{System.Threading.Tasks.Task})">
            <summary> Blocking call that will not return until client has been stopped. This is mainly intended for use in console applications. </summary>
        </member>
        <member name="M:Discord.DiscordWSClient.Run">
            <summary> Blocking call that will not return until client has been stopped. This is mainly intended for use in console applications. </summary>
        </member>
        <member name="M:Discord.DiscordWSClient.Discord#Audio#IDiscordVoiceClient#SendVoicePCM(System.Byte[],System.Int32)">
            <summary> Sends a PCM frame to the voice server. Will block until space frees up in the outgoing buffer. </summary>
            <param name="data">PCM frame to send. This must be a single or collection of uncompressed 48Kz monochannel 20ms PCM frames. </param>
            <param name="count">Number of bytes in this frame. </param>
        </member>
        <member name="M:Discord.DiscordWSClient.Discord#Audio#IDiscordVoiceClient#ClearVoicePCM">
            <summary> Clears the PCM buffer. </summary>
        </member>
        <member name="M:Discord.DiscordWSClient.Discord#Audio#IDiscordVoiceClient#WaitVoice">
            <summary> Returns a task that completes once the voice output buffer is empty. </summary>
        </member>
        <member name="P:Discord.DiscordWSClientConfig.ConnectionTimeout">
            <summary> Max time in milliseconds to wait for DiscordClient to connect and initialize. </summary>
        </member>
        <member name="P:Discord.DiscordWSClientConfig.ReconnectDelay">
            <summary> Gets or sets the time (in milliseconds) to wait after an unexpected disconnect before reconnecting. </summary>
        </member>
        <member name="P:Discord.DiscordWSClientConfig.FailedReconnectDelay">
            <summary> Gets or sets the time (in milliseconds) to wait after an reconnect fails before retrying. </summary>
        </member>
        <member name="P:Discord.DiscordWSClientConfig.WebSocketInterval">
            <summary> Gets or sets the time (in milliseconds) to wait when the websocket's message queue is empty before checking again. </summary>
        </member>
        <member name="P:Discord.DiscordWSClientConfig.VoiceBufferLength">
            <summary> Gets or sets the max buffer length (in milliseconds) for outgoing voice packets. This value is the target maximum but is not guaranteed, the buffer will often go slightly above this value. </summary>
        </member>
        <member name="P:Discord.DiscordWSClientConfig.VoiceMode">
            <summary> (Experimental) Enables the voice websocket and UDP client and specifies how it will be used. Any option other than Disabled requires the opus .dll or .so be in the local lib/ folder. </summary>
        </member>
        <member name="P:Discord.DiscordWSClientConfig.EnableVoiceEncryption">
            <summary> (Experimental) Enables the voice websocket and UDP client. This option requires the libsodium .dll or .so be in the local lib/ folder. </summary>
        </member>
        <member name="P:Discord.DiscordWSClientConfig.UseLargeThreshold">
            <summary> (Experimental) Instructs Discord to not send send information about offline users, for servers with more than 50 users. </summary>
        </member>
        <member name="F:Discord.ChannelType.Text">
            <summary> A text-only channel. </summary>
        </member>
        <member name="F:Discord.ChannelType.Voice">
            <summary> A voice-only channel. </summary>
        </member>
        <member name="F:Discord.PermissionTarget.Role">
            <summary> A text-only channel. </summary>
        </member>
        <member name="F:Discord.PermissionTarget.User">
            <summary> A voice-only channel. </summary>
        </member>
        <member name="F:Discord.UserStatus.Online">
            <summary> User is currently online and active. </summary>
        </member>
        <member name="F:Discord.UserStatus.Idle">
            <summary> User is currently online but inactive. </summary>
        </member>
        <member name="F:Discord.UserStatus.Offline">
            <summary> User is offline. </summary>
        </member>
        <member name="T:Discord.Audio.Opus.Application">
            <summary>Supported coding modes.</summary>
        </member>
        <member name="F:Discord.Audio.Opus.Application.Voip">
            <summary>
            Gives best quality at a given bitrate for voice signals. It enhances the input signal by high-pass filtering and emphasizing formants and harmonics. 
            Optionally it includes in-band forward error correction to protect against packet loss. Use this mode for typical VoIP applications. 
            Because of the enhancement, even at high bitrates the output may sound different from the input.
            </summary>
        </member>
        <member name="F:Discord.Audio.Opus.Application.Audio">
            <summary>
            Gives best quality at a given bitrate for most non-voice signals like music. 
            Use this mode for music and mixed (music/voice) content, broadcast, and applications requiring less than 15 ms of coding delay.
            </summary>
        </member>
        <member name="F:Discord.Audio.Opus.Application.Restricted_LowLatency">
            <summary> Low-delay mode that disables the speech-optimized mode in exchange for slightly reduced delay.  </summary>
        </member>
        <member name="F:Discord.Audio.Opus.Error.OK">
            <summary>  No error. </summary>
        </member>
        <member name="F:Discord.Audio.Opus.Error.BadArg">
            <summary> One or more invalid/out of range arguments. </summary>
        </member>
        <member name="F:Discord.Audio.Opus.Error.BufferToSmall">
            <summary> The mode struct passed is invalid. </summary>
        </member>
        <member name="F:Discord.Audio.Opus.Error.InternalError">
            <summary> An internal error was detected. </summary>
        </member>
        <member name="F:Discord.Audio.Opus.Error.InvalidPacket">
            <summary> The compressed data passed is corrupted. </summary>
        </member>
        <member name="F:Discord.Audio.Opus.Error.Unimplemented">
            <summary> Invalid/unsupported request number. </summary>
        </member>
        <member name="F:Discord.Audio.Opus.Error.InvalidState">
            <summary> An encoder or decoder structure is invalid or already freed.  </summary>
        </member>
        <member name="F:Discord.Audio.Opus.Error.AllocFail">
            <summary> Memory allocation has failed. </summary>
        </member>
        <member name="T:Discord.Audio.OpusDecoder">
            <summary> Opus codec wrapper. </summary>
        </member>
        <member name="F:Discord.Audio.OpusDecoder.BitRate">
            <summary> Gets the bit rate of the encoder. </summary>
        </member>
        <member name="P:Discord.Audio.OpusDecoder.InputSamplingRate">
            <summary> Gets the input sampling rate of the encoder. </summary>
        </member>
        <member name="P:Discord.Audio.OpusDecoder.InputChannels">
            <summary> Gets the number of channels of the encoder. </summary>
        </member>
        <member name="P:Discord.Audio.OpusDecoder.FrameLength">
            <summary> Gets the milliseconds per frame. </summary>
        </member>
        <member name="P:Discord.Audio.OpusDecoder.SamplesPerFrame">
            <summary> Gets the number of samples per frame. </summary>
        </member>
        <member name="P:Discord.Audio.OpusDecoder.SampleSize">
            <summary> Gets the bytes per sample. </summary>
        </member>
        <member name="P:Discord.Audio.OpusDecoder.FrameSize">
            <summary> Gets the bytes per frame. </summary>
        </member>
        <member name="M:Discord.Audio.OpusDecoder.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Creates a new Opus encoder. </summary>
            <param name="samplingRate">Sampling rate of the input signal (Hz). Supported Values:  8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels (1 or 2) in input signal.</param>
            <param name="frameLength">Length, in milliseconds, that each frame takes. Supported Values: 2.5, 5, 10, 20, 40, 60</param>
            <param name="application">Coding mode.</param>
            <returns>A new <c>OpusEncoder</c></returns>
        </member>
        <member name="M:Discord.Audio.OpusDecoder.DecodeFrame(System.Byte[],System.Int32,System.Byte[])">
            <summary> Produces Opus encoded audio from PCM samples. </summary>
            <param name="input">PCM samples to encode.</param>
            <param name="inputOffset">Offset of the frame in pcmSamples.</param>
            <param name="output">Buffer to store the encoded frame.</param>
            <returns>Length of the frame contained in outputBuffer.</returns>
        </member>
        <member name="M:Discord.Audio.OpusDecoder.SetForwardErrorCorrection(System.Boolean)">
            <summary> Gets or sets whether Forward Error Correction is enabled. </summary>
        </member>
        <member name="T:Discord.Audio.OpusEncoder">
            <summary> Opus codec wrapper. </summary>
        </member>
        <member name="F:Discord.Audio.OpusEncoder.BitRate">
            <summary> Gets the bit rate of the encoder. </summary>
        </member>
        <member name="P:Discord.Audio.OpusEncoder.InputSamplingRate">
            <summary> Gets the input sampling rate of the encoder. </summary>
        </member>
        <member name="P:Discord.Audio.OpusEncoder.InputChannels">
            <summary> Gets the number of channels of the encoder. </summary>
        </member>
        <member name="P:Discord.Audio.OpusEncoder.FrameLength">
            <summary> Gets the milliseconds per frame. </summary>
        </member>
        <member name="P:Discord.Audio.OpusEncoder.SamplesPerFrame">
            <summary> Gets the number of samples per frame. </summary>
        </member>
        <member name="P:Discord.Audio.OpusEncoder.SampleSize">
            <summary> Gets the bytes per sample. </summary>
        </member>
        <member name="P:Discord.Audio.OpusEncoder.FrameSize">
            <summary> Gets the bytes per frame. </summary>
        </member>
        <member name="P:Discord.Audio.OpusEncoder.Application">
            <summary> Gets the coding mode of the encoder. </summary>
        </member>
        <member name="M:Discord.Audio.OpusEncoder.#ctor(System.Int32,System.Int32,System.Int32,Discord.Audio.Opus.Application)">
            <summary> Creates a new Opus encoder. </summary>
            <param name="samplingRate">Sampling rate of the input signal (Hz). Supported Values:  8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels (1 or 2) in input signal.</param>
            <param name="frameLength">Length, in milliseconds, that each frame takes. Supported Values: 2.5, 5, 10, 20, 40, 60</param>
            <param name="application">Coding mode.</param>
            <returns>A new <c>OpusEncoder</c></returns>
        </member>
        <member name="M:Discord.Audio.OpusEncoder.EncodeFrame(System.Byte[],System.Int32,System.Byte[])">
            <summary> Produces Opus encoded audio from PCM samples. </summary>
            <param name="input">PCM samples to encode.</param>
            <param name="inputOffset">Offset of the frame in pcmSamples.</param>
            <param name="output">Buffer to store the encoded frame.</param>
            <returns>Length of the frame contained in outputBuffer.</returns>
        </member>
        <member name="M:Discord.Audio.OpusEncoder.SetForwardErrorCorrection(System.Boolean)">
            <summary> Gets or sets whether Forward Error Correction is enabled. </summary>
        </member>
        <member name="P:Discord.CachedObject`1.Id">
            <summary> Returns the unique identifier for this object. </summary>
        </member>
        <member name="M:Discord.Format.Escape(System.String)">
            <summary> Removes all special formatting characters from the provided text. </summary>
        </member>
        <member name="M:Discord.Format.Normal(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with no formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Format.Bold(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with bold formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Format.Italics(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with italics formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Format.Underline(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with underline formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Format.Strikeout(System.String,System.Boolean)">
            <summary> Returns a markdown-formatted string with strikeout formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Format.Code(System.String,System.String)">
            <summary> Returns a markdown-formatted string with strikeout formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Format.Multiple(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary> Returns a markdown-formatted string with multiple formatting, optionally escaping the contents. </summary>
        </member>
        <member name="M:Discord.Mention.User(Discord.User)">
            <summary> Returns the string used to create a user mention. </summary>
        </member>
        <member name="M:Discord.Mention.User(Discord.GlobalUser)">
            <summary> Returns the string used to create a user mention. </summary>
        </member>
        <member name="M:Discord.Mention.Channel(Discord.Channel)">
            <summary> Returns the string used to create a channel mention. </summary>
        </member>
        <member name="M:Discord.Mention.Everyone">
            <summary> Returns the string used to create a mention to everyone in a channel. </summary>
        </member>
        <member name="P:Discord.Channel.Name">
            <summary> Returns the name of this channel. </summary>
        </member>
        <member name="P:Discord.Channel.Topic">
            <summary> Returns the topic associated with this channel. </summary>
        </member>
        <member name="P:Discord.Channel.Position">
            <summary> Returns the position of this channel in the channel list for this server. </summary>
        </member>
        <member name="P:Discord.Channel.IsPrivate">
            <summary> Returns false is this is a public chat and true if this is a private chat with another user (see Recipient). </summary>
        </member>
        <member name="P:Discord.Channel.Type">
            <summary> Returns the type of this channel (see ChannelTypes). </summary>
        </member>
        <member name="P:Discord.Channel.Server">
            <summary> Returns the server containing this channel. </summary>
        </member>
        <member name="P:Discord.Channel.Recipient">
            For private chats, returns the target user, otherwise null.
        </member>
        <member name="P:Discord.Channel.Members">
            <summary> Returns a collection of all users with read access to this channel. </summary>
        </member>
        <member name="P:Discord.Channel.Messages">
            <summary> Returns a collection of all messages the client has seen posted in this channel. This collection does not guarantee any ordering. </summary>
        </member>
        <member name="F:Discord.Channel._initialPermissionsOverwrites">
            <summary> Returns a collection of all custom permissions used for this channel. </summary>
        </member>
        <member name="P:Discord.Color.R">
            <summary> Gets or sets the red component for this color. </summary>
        </member>
        <member name="P:Discord.Color.G">
            <summary> Gets or sets the green component for this color. </summary>
        </member>
        <member name="P:Discord.Color.B">
            <summary> Gets or sets the blue component for this color. </summary>
        </member>
        <member name="P:Discord.GlobalUser.Email">
            <summary> Returns the email for this user. </summary>
            <remarks> This field is only ever populated for the current logged in user. </remarks>
        </member>
        <member name="P:Discord.GlobalUser.IsVerified">
            <summary> Returns if the email for this user has been verified. </summary>
            <remarks> This field is only ever populated for the current logged in user. </remarks>
        </member>
        <member name="P:Discord.GlobalUser.PrivateChannel">
            <summary> Returns the private messaging channel with this user, if one exists. </summary>
        </member>
        <member name="P:Discord.GlobalUser.Memberships">
            <summary> Returns a collection of all server-specific data for every server this user is a member of. </summary>
        </member>
        <member name="P:Discord.Invite.ServerInfo.Id">
            <summary> Returns the unique identifier of this server. </summary>
        </member>
        <member name="P:Discord.Invite.ServerInfo.Name">
            <summary> Returns the name of this server. </summary>
        </member>
        <member name="P:Discord.Invite.ChannelInfo.Id">
            <summary> Returns the unique identifier of this channel. </summary>
        </member>
        <member name="P:Discord.Invite.ChannelInfo.Name">
            <summary> Returns the name of this channel. </summary>
        </member>
        <member name="P:Discord.Invite.InviterInfo.Id">
            <summary> Returns the unique identifier for this user. </summary>
        </member>
        <member name="P:Discord.Invite.InviterInfo.Name">
            <summary> Returns the name of this user. </summary>
        </member>
        <member name="P:Discord.Invite.InviterInfo.Discriminator">
            <summary> Returns the by-name unique identifier for this user. </summary>
        </member>
        <member name="P:Discord.Invite.InviterInfo.AvatarId">
            <summary> Returns the unique identifier for this user's avatar. </summary>
        </member>
        <member name="P:Discord.Invite.InviterInfo.AvatarUrl">
            <summary> Returns the full path to this user's avatar. </summary>
        </member>
        <member name="P:Discord.Invite.Server">
            <summary> Returns information about the server this invite is attached to. </summary>
        </member>
        <member name="P:Discord.Invite.Channel">
            <summary> Returns information about the channel this invite is attached to. </summary>
        </member>
        <member name="P:Discord.Invite.Inviter">
            <summary> Returns information about the user that created this invite. </summary>
        </member>
        <member name="P:Discord.Invite.XkcdCode">
            <summary> Returns, if enabled, an alternative human-readable code for URLs. </summary>
        </member>
        <member name="P:Discord.Invite.MaxAge">
            <summary> Time (in seconds) until the invite expires. Set to 0 to never expire. </summary>
        </member>
        <member name="P:Discord.Invite.Uses">
            <summary> The amount  of times this invite has been used. </summary>
        </member>
        <member name="P:Discord.Invite.MaxUses">
            <summary> The max amount  of times this invite may be used. </summary>
        </member>
        <member name="P:Discord.Invite.IsRevoked">
            <summary> Returns true if this invite has been destroyed, or you are banned from that server. </summary>
        </member>
        <member name="P:Discord.Invite.IsTemporary">
            <summary> If true, a user accepting this invite will be kicked from the server after closing their client. </summary>
        </member>
        <member name="P:Discord.Invite.Url">
            <summary> Returns a URL for this invite using XkcdCode if available or Id if not. </summary>
        </member>
        <member name="P:Discord.Message.Attachment.Id">
            <summary> Unique identifier for this file. </summary>
        </member>
        <member name="P:Discord.Message.Attachment.Size">
            <summary> Size, in bytes, of this file file. </summary>
        </member>
        <member name="P:Discord.Message.Attachment.Filename">
            <summary> Filename of this file. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Url">
            <summary> URL of this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Type">
            <summary> Type of this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Title">
            <summary> Title for this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Description">
            <summary> Summary of this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Author">
            <summary> Returns information about the author of this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Provider">
            <summary> Returns information about the providing website of this embed. </summary>
        </member>
        <member name="P:Discord.Message.Embed.Thumbnail">
            <summary> Returns the thumbnail of this embed. </summary>
        </member>
        <member name="P:Discord.Message.EmbedReference.Url">
            <summary> URL of this embed provider. </summary>
        </member>
        <member name="P:Discord.Message.EmbedReference.Name">
            <summary> Name of this embed provider. </summary>
        </member>
        <member name="P:Discord.Message.File.Url">
            <summary> Download url for this file. </summary>
        </member>
        <member name="P:Discord.Message.File.ProxyUrl">
            <summary> Preview url for this file. </summary>
        </member>
        <member name="P:Discord.Message.File.Width">
            <summary> Width of the this file, if it is an image. </summary>
        </member>
        <member name="P:Discord.Message.File.Height">
            <summary> Height of this file, if it is an image. </summary>
        </member>
        <member name="P:Discord.Message.IsMentioningMe">
            <summary> Returns true if the logged-in user was mentioned. </summary>
            <remarks> This is not set to true if the user was mentioned with @everyone (see IsMentioningEverone). </remarks>
        </member>
        <member name="P:Discord.Message.IsTTS">
            <summary> Returns true if the message was sent as text-to-speech by someone with permissions to do so. </summary>
        </member>
        <member name="P:Discord.Message.IsQueued">
            <summary> Returns true if the message is still in the outgoing message queue. </summary>
        </member>
        <member name="P:Discord.Message.HasFailed">
            <summary> Returns true if the message was rejected by the server. </summary>
        </member>
        <member name="P:Discord.Message.RawText">
            <summary> Returns the raw content of this message as it was received from the server.. </summary>
        </member>
        <member name="P:Discord.Message.Text">
            <summary> Returns the content of this message with any special references such as mentions converted. </summary>
        </member>
        <member name="P:Discord.Message.Timestamp">
            <summary> Returns the timestamp for when this message was sent. </summary>
        </member>
        <member name="P:Discord.Message.EditedTimestamp">
            <summary> Returns the timestamp for when this message was last edited. </summary>
        </member>
        <member name="P:Discord.Message.Attachments">
            <summary> Returns the attachments included in this message. </summary>
        </member>
        <member name="P:Discord.Message.Embeds">
            <summary> Returns a collection of all embeded content in this message. </summary>
        </member>
        <member name="P:Discord.Message.MentionedUsers">
            <summary> Returns a collection of all users mentioned in this message. </summary>
        </member>
        <member name="P:Discord.Message.MentionedChannels">
            <summary> Returns a collection of all channels mentioned in this message. </summary>
        </member>
        <member name="P:Discord.Message.MentionedRoles">
            <summary> Returns a collection of all roles mentioned in this message. </summary>
        </member>
        <member name="P:Discord.Message.Server">
            <summary> Returns the server containing the channel this message was sent to. </summary>
        </member>
        <member name="P:Discord.Message.Channel">
            <summary> Returns the channel this message was sent to. </summary>
        </member>
        <member name="P:Discord.Message.IsAuthor">
            <summary> Returns true if the current user created this message. </summary>
        </member>
        <member name="P:Discord.Message.User">
            <summary> Returns the author of this message. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.BanMembers">
            <summary> If True, a user may ban users from the server. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.KickMembers">
            <summary> If True, a user may kick users from the server. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.ManageRoles">
            <summary> If True, a user may adjust roles. This also implictly grants all other permissions. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.ManageChannels">
            <summary> If True, a user may create, delete and modify channels. </summary>
        </member>
        <member name="P:Discord.ServerPermissions.ManageServer">
            <summary> If True, a user may adjust server properties. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.ManagePermissions">
            <summary> If True, a user may adjust permissions. This also implictly grants all other permissions. </summary>
        </member>
        <member name="P:Discord.ChannelPermissions.ManageChannel">
            <summary> If True, a user may create, delete and modify this channel. </summary>
        </member>
        <member name="P:Discord.Permissions.CreateInstantInvite">
            <summary> If True, a user may create invites. </summary>
        </member>
        <member name="P:Discord.Permissions.ReadMessages">
            <summary> If True, a user may join channels. </summary>
        </member>
        <member name="P:Discord.Permissions.SendMessages">
            <summary> If True, a user may send messages. </summary>
        </member>
        <member name="P:Discord.Permissions.SendTTSMessages">
            <summary> If True, a user may send text-to-speech messages. </summary>
        </member>
        <member name="P:Discord.Permissions.ManageMessages">
            <summary> If True, a user may delete messages. </summary>
        </member>
        <member name="P:Discord.Permissions.EmbedLinks">
            <summary> If True, Discord will auto-embed links sent by this user. </summary>
        </member>
        <member name="P:Discord.Permissions.AttachFiles">
            <summary> If True, a user may send files. </summary>
        </member>
        <member name="P:Discord.Permissions.ReadMessageHistory">
            <summary> If True, a user may read previous messages. </summary>
        </member>
        <member name="P:Discord.Permissions.MentionEveryone">
            <summary> If True, a user may mention @everyone. </summary>
        </member>
        <member name="P:Discord.Permissions.Connect">
            <summary> If True, a user may connect to a voice channel. </summary>
        </member>
        <member name="P:Discord.Permissions.Speak">
            <summary> If True, a user may speak in a voice channel. </summary>
        </member>
        <member name="P:Discord.Permissions.MuteMembers">
            <summary> If True, a user may mute users. </summary>
        </member>
        <member name="P:Discord.Permissions.DeafenMembers">
            <summary> If True, a user may deafen users. </summary>
        </member>
        <member name="P:Discord.Permissions.MoveMembers">
            <summary> If True, a user may move other users between voice channels. </summary>
        </member>
        <member name="P:Discord.Permissions.UseVoiceActivation">
            <summary> If True, a user may use voice activation rather than push-to-talk. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.CreateInstantInvite">
            <summary> If True, a user may create invites. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.ReadMessages">
            <summary> If True, a user may join channels. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.SendMessages">
            <summary> If True, a user may send messages. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.SendTTSMessages">
            <summary> If True, a user may send text-to-speech messages. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.ManageMessages">
            <summary> If True, a user may delete messages. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.EmbedLinks">
            <summary> If True, Discord will auto-embed links sent by this user. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.AttachFiles">
            <summary> If True, a user may send files. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.ReadMessageHistory">
            <summary> If True, a user may read previous messages. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.MentionEveryone">
            <summary> If True, a user may mention @everyone. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.Connect">
            <summary> If True, a user may connect to a voice channel. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.Speak">
            <summary> If True, a user may speak in a voice channel. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.MuteMembers">
            <summary> If True, a user may mute users. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.DeafenMembers">
            <summary> If True, a user may deafen users. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.MoveMembers">
            <summary> If True, a user may move other users between voice channels. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.UseVoiceActivation">
            <summary> If True, a user may use voice activation rather than push-to-talk. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.ManagePermissions">
            <summary> If True, a user may adjust permissions. This also implictly grants all other permissions. </summary>
        </member>
        <member name="P:Discord.DualChannelPermissions.ManageChannel">
            <summary> If True, a user may create, delete and modify this channel. </summary>
        </member>
        <member name="P:Discord.Role.Name">
            <summary> Returns the name of this role. </summary>
        </member>
        <member name="P:Discord.Role.IsHoisted">
            <summary> If true, this role is displayed isolated from other users. </summary>
        </member>
        <member name="P:Discord.Role.Position">
            <summary> Returns the position of this channel in the role list for this server. </summary>
        </member>
        <member name="P:Discord.Role.Color">
            <summary> Returns the color of this role. </summary>
        </member>
        <member name="P:Discord.Role.IsManaged">
            <summary> Returns whether this role is managed by server (e.g. for Twitch integration) </summary>
        </member>
        <member name="P:Discord.Role.Permissions">
            <summary> Returns the the permissions contained by this role. </summary>
        </member>
        <member name="P:Discord.Role.Server">
            <summary> Returns the server this role is a member of. </summary>
        </member>
        <member name="P:Discord.Role.IsEveryone">
            <summary> Returns true if this is the role representing all users in a server. </summary>
        </member>
        <member name="P:Discord.Role.Members">
            <summary> Returns a list of all members in this role. </summary>
        </member>
        <member name="P:Discord.Server.Name">
            <summary> Returns the name of this channel. </summary>
        </member>
        <member name="P:Discord.Server.CurrentUser">
            <summary> Returns the current logged-in user's data for this server. </summary>
        </member>
        <member name="P:Discord.Server.AFKTimeout">
            <summary> Returns the amount of time (in seconds) a user must be inactive for until they are automatically moved to the AFK channel (see AFKChannel). </summary>
        </member>
        <member name="P:Discord.Server.JoinedAt">
            <summary> Returns the date and time your joined this server. </summary>
        </member>
        <member name="P:Discord.Server.Region">
            <summary> Returns the region for this server (see Regions). </summary>
        </member>
        <member name="P:Discord.Server.IsOwner">
            <summary> Returns true if the current user created this server. </summary>
        </member>
        <member name="P:Discord.Server.Owner">
            <summary> Returns the user that first created this server. </summary>
        </member>
        <member name="P:Discord.Server.AFKChannel">
            <summary> Returns the AFK voice channel for this server (see AFKTimeout). </summary>
        </member>
        <member name="P:Discord.Server.DefaultChannel">
            <summary> Returns the default channel for this server. </summary>
        </member>
        <member name="P:Discord.Server.Bans">
            <summary> Returns a collection of the ids of all users banned on this server. </summary>
        </member>
        <member name="P:Discord.Server.Channels">
            <summary> Returns a collection of all channels within this server. </summary>
        </member>
        <member name="P:Discord.Server.TextChannels">
            <summary> Returns a collection of all channels within this server. </summary>
        </member>
        <member name="P:Discord.Server.VoiceChannels">
            <summary> Returns a collection of all channels within this server. </summary>
        </member>
        <member name="P:Discord.Server.Members">
            <summary> Returns a collection of all users within this server with their server-specific data. </summary>
        </member>
        <member name="P:Discord.Server.EveryoneRole">
            <summary> Return the the role representing all users in a server. </summary>
        </member>
        <member name="P:Discord.Server.Roles">
            <summary> Returns a collection of all roles within this server. </summary>
        </member>
        <member name="P:Discord.User.UniqueId">
            <summary> Returns a unique identifier combining this user's id with its server's. </summary>
        </member>
        <member name="P:Discord.User.Name">
            <summary> Returns the name of this user on this server. </summary>
        </member>
        <member name="P:Discord.User.Discriminator">
            <summary> Returns a by-name unique identifier separating this user from others with the same name. </summary>
        </member>
        <member name="P:Discord.User.AvatarId">
            <summary> Returns the unique identifier for this user's current avatar. </summary>
        </member>
        <member name="P:Discord.User.AvatarUrl">
            <summary> Returns the URL to this user's current avatar. </summary>
        </member>
        <member name="P:Discord.User.JoinedAt">
            <summary> Returns the datetime that this user joined this server. </summary>
        </member>
        <member name="P:Discord.User.GameId">
            <summary> Returns the id for the game this user is currently playing. </summary>
        </member>
        <member name="P:Discord.User.Status">
            <summary> Returns the current status for this user. </summary>
        </member>
        <member name="P:Discord.User.LastActivityAt">
            <summary> Returns the time this user last sent/edited a message, started typing or sent voice data in this server. </summary>
        </member>
        <member name="P:Discord.User.LastOnlineAt">
            <summary> Returns the time this user was last seen online in this server. </summary>
        </member>
        <member name="P:Discord.User.PrivateChannel">
            <summary> Returns the private messaging channel with this user, if one exists. </summary>
        </member>
        <member name="P:Discord.User.Messages">
            <summary> Returns a collection of all messages this user has sent on this server that are still in cache. </summary>
        </member>
        <member name="P:Discord.User.Channels">
            <summary> Returns a collection of all channels this user is a member of. </summary>
        </member>
    </members>
</doc>
